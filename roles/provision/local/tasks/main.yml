---
# Error out early if the `virthost` variable is not set.
- name: Check that virthost is set
  fail:
    msg: "You need to set virthost before running these playbooks."
  when: virthost|default("") | length == 0

- name: Get current user group for localhost
  command: "id -gn"
  register: local_user_group
  changed_when: false

- name: Register fact for current user group
  set_fact:
    current_group_local: "{{ local_user_group.stdout }}"
    cacheable: true
  tags:
    - provision

- block:
    - name: Ensure local working dir exists
      file:
        path: "{{ local_working_dir }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ current_group_local }}"
  rescue:
    # if it fails we try again as with become, become must be fallback because
    # otherwise first attempt will fail on local machines without sudo, a
    # use case that we want to support.
    - name: Ensure local working dir exists
      file:
        path: "{{ local_working_dir }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ current_group_local }}"
      become: true

# This file needs to exist because it will later be referenced in some
# ssh command lines.
- name: Create empty ssh config file
  file:
    path: "{{ local_working_dir }}/ssh.config.ansible"
    state: touch


# Add the virthost to the in-memory inventory.  The inventory is not
# written out to disk unless you call the `tripleo-inventory` role.
- name: Add the virthost to the inventory
  add_host:
    name: "{{ virthost }}"
    groups: "virthost"
    ansible_fqdn: "{{ virthost }}"
    ansible_user: "root"
    ansible_host: "{{ virthost }}"

# The following idempotent code ensures when running
# with 127.0.0.2 that the non_root_user facts are known
# to both the virthost and localhost hostvars
# duplicates roles/provision/remote/tasks/main.yml#L40-L71
# This avoids the need to delegate in
# roles/virtbmc/tasks/configure-vbmc.yml#L30-L33
# The delegation fails across mixed virthosts
# with different python interps.

# Create a non-root user on the target host.  This is the user that
# will own the virtual infrastructure on which we deploy openstack.
#   when: virthost == '127.0.0.2'
- name: remove the need to delegate back to virthost for the virtbmc
  block:
    - name: Create non-root user
      user:
        name: "{{ non_root_user }}"
        state: present
        shell: /bin/bash
        create_home: true
      become: true

    - name: Get the non-root user UID
      command: "id {{ non_root_user }} -u"
      register: non_root_user_uid_output
      changed_when: false
      retries: 3
      delay: 5
      until: non_root_user_uid_output is not failed

    - name: Get the non-root user homedir
      shell: |
        set -o pipefail
        getent passwd {{ non_root_user }} | cut -d: -f6
      register: non_root_user_homedir_output
      changed_when: false

    - name: Save the non-root user UID
      set_fact:
        non_root_user_uid: "{{ non_root_user_uid_output.stdout }}"
        cacheable: true

    - name: Save the non-root user homedir
      set_fact:
        non_root_user_homedir: "{{ non_root_user_homedir_output.stdout }}"
        cacheable: true
  when: virthost == '127.0.0.2'
